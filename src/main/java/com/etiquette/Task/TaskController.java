package com.etiquette.Task;

import java.util.Collection;
import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.etiquette.GlobalExceptionHandler.GlobalExceptionHandler;
import com.etiquette.Mapping.CustomMap;
import com.etiquette.Task.dtos.AddTaskFormDto;
import com.etiquette.Task.dtos.ReadTaskDto;
import com.etiquette.Task.dtos.UpdateTaskDto;

@Controller // This means that this class is a Controller
@RequestMapping(path="/task") // This means URL's start with /demo (after Application path)
public class TaskController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private TaskRepository taskRepository;
  ModelMapper modelMapper = new ModelMapper();

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody ResponseEntity<?> addNewTask (@RequestBody AddTaskFormDto addTaskFormDto) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
      Task task = modelMapper.map(addTaskFormDto, Task.class);
      Task savedTask = taskRepository.save(task);
      ReadTaskDto savedTaskReadDto = modelMapper.map(savedTask, ReadTaskDto.class);
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("Task added", savedTaskReadDto);
      return exceptionHandler;
  }

  @GetMapping(path="/all")
  public @ResponseBody ResponseEntity<?> getAllTasks() {
    Iterable<Task> tasks = taskRepository.findAll();
    if (((Collection<?>) tasks).isEmpty()) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("No tasks found");
      return exceptionHandler;
    } else {
      List<ReadTaskDto> boardReadDtoList = CustomMap.mapIterable(tasks, ReadTaskDto.class);
      Integer nbOfTasksInt = boardReadDtoList.size();
      String nbOfTasksString = Integer.toString(nbOfTasksInt);
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequestIterable(nbOfTasksString+" Tasks found", boardReadDtoList);
      return exceptionHandler;
    }
  }

  @GetMapping(path="/one")
  public @ResponseBody ResponseEntity<?>  getOneTask(@RequestParam Integer id) {
    Optional<Task> task = taskRepository.findById(id);
    if (task.isEmpty()) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("Task not found");
      return exceptionHandler;
    } else {
      ReadTaskDto readTaskDto = modelMapper.map(task, ReadTaskDto.class);
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("Task found", readTaskDto);
      return exceptionHandler;
    }
  }

  @DeleteMapping(path="/delete")
  public @ResponseBody ResponseEntity<?> deleteTask (@RequestParam Integer id) {
    if (!taskRepository.existsById(id)) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("Task not found");
      return exceptionHandler;
    } else {
      taskRepository.deleteById(id);
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("Task deleted", null);
      return exceptionHandler;
    }
  }

  @PutMapping(path="/update")
  public @ResponseBody ResponseEntity<?> updateTask (@RequestParam Integer id, @RequestBody UpdateTaskDto updateTaskDto) {
    if (!taskRepository.existsById(id)) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("Task not found");
      return exceptionHandler;
    } else {
      updateTaskDto.setId(id);

      Task task = modelMapper.map(updateTaskDto, Task.class);

      Task savedTask = taskRepository.save(task);

      ReadTaskDto readTaskDto = modelMapper.map(savedTask, ReadTaskDto.class);

      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("Task updated", readTaskDto);
      return exceptionHandler;
    }
  }
}