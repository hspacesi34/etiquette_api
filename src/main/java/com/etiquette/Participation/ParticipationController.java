package com.etiquette.Participation;

import java.util.Collection;
import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.etiquette.GlobalExceptionHandler.GlobalExceptionHandler;
import com.etiquette.Mapping.CustomMap;
import com.etiquette.Participation.dtos.AddParticipationFormDto;
import com.etiquette.Participation.dtos.ReadParticipationDto;
import com.etiquette.Participation.dtos.UpdateParticipationDto;
import com.etiquette.User.User;

@Controller // This means that this class is a Controller
@RequestMapping(path="/participation") // This means URL's start with /demo (after Application path)
public class ParticipationController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private ParticipationRepository participationRepository;
  ModelMapper modelMapper = new ModelMapper();

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody ResponseEntity<?> addNewParticipation (@RequestBody AddParticipationFormDto addParticipationFormDto) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
    User userEntity = modelMapper.map(addParticipationFormDto.getUser(), User.class);
    if (participationRepository.findByUser(userEntity).isPresent()) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityAlreadyExists("User already participates");
      return exceptionHandler;
    } else {
      Participation participation = modelMapper.map(addParticipationFormDto, Participation.class);
      Participation savedParticipation = participationRepository.save(participation);
      ReadParticipationDto savedParticipationReadDto = modelMapper.map(savedParticipation, ReadParticipationDto.class);
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("Participation added", savedParticipationReadDto);
      return exceptionHandler;
    }
  }

  @GetMapping(path="/all")
  public @ResponseBody ResponseEntity<?> getAllParticipations() {
    Iterable<Participation> participations = participationRepository.findAll();
    if (((Collection<?>) participations).isEmpty()) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("No Participations found");
      return exceptionHandler;
    } else {
      List<ReadParticipationDto> participationReadDtoList = CustomMap.mapIterable(participations, ReadParticipationDto.class);
      Integer nbOfParticipationsInt = participationReadDtoList.size();
      String nbOfParticipationsString = Integer.toString(nbOfParticipationsInt);
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequestIterable(nbOfParticipationsString+" Participations found", participationReadDtoList);
      return exceptionHandler;
    }
  }

  @GetMapping(path="/one")
  public @ResponseBody ResponseEntity<?>  getOneParticipation(@RequestParam Integer id) {
    Optional<Participation> participation = participationRepository.findById(id);
    if (participation.isEmpty()) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("Participation not found");
      return exceptionHandler;
    } else {
      ReadParticipationDto readParticipationDto = modelMapper.map(participation, ReadParticipationDto.class);
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("Participation found", readParticipationDto);
      return exceptionHandler;
    }
  }

  @DeleteMapping(path="/delete")
  public @ResponseBody ResponseEntity<?> deleteParticipation (@RequestParam Integer id) {
    if (!participationRepository.existsById(id)) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("Participation not found");
      return exceptionHandler;
    } else {
      participationRepository.deleteById(id);
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("Participation deleted", null);
      return exceptionHandler;
    }
  }

  @PutMapping(path="/update")
  public @ResponseBody ResponseEntity<?> updateParticipation (@RequestParam Integer id, @RequestBody UpdateParticipationDto updateParticipationDto) {
    if (!participationRepository.existsById(id)) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("Participation not found");
      return exceptionHandler;
    } else {
      updateParticipationDto.setId(id);

      Participation participation = modelMapper.map(updateParticipationDto, Participation.class);

      Participation savedParticipation = participationRepository.save(participation);

      ReadParticipationDto readParticipationDto = modelMapper.map(savedParticipation, ReadParticipationDto.class);

      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("Participation updated", readParticipationDto);
      return exceptionHandler;
    }
  }
}