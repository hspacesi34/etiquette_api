package com.etiquette.Board;

import java.util.Collection;
import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.etiquette.Board.dtos.AddBoardFormDto;
import com.etiquette.Board.dtos.ReadBoardDto;
import com.etiquette.Board.dtos.UpdateBoardDto;
import com.etiquette.GlobalExceptionHandler.GlobalExceptionHandler;
import com.etiquette.Mapping.CustomMap;

@Controller // This means that this class is a Controller
@RequestMapping(path="/board") // This means URL's start with /demo (after Application path)
public class BoardController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private BoardRepository boardRepository;
  ModelMapper modelMapper = new ModelMapper();

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody ResponseEntity<?> addNewBoard (@RequestBody AddBoardFormDto addBoardFormDto) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
      Board board = modelMapper.map(addBoardFormDto, Board.class);
      Board savedBoard = boardRepository.save(board);
      ReadBoardDto savedBoardReadDto = modelMapper.map(savedBoard, ReadBoardDto.class);
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("Board added", savedBoardReadDto);
      return exceptionHandler;
  }

  @GetMapping(path="/all")
  public @ResponseBody ResponseEntity<?> getAllBoards() {
    Iterable<Board> boards = boardRepository.findAll();
    if (((Collection<?>) boards).isEmpty()) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("No boards found");
      return exceptionHandler;
    } else {
      List<ReadBoardDto> boardReadDtoList = CustomMap.mapIterable(boards, ReadBoardDto.class);
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequestIterable("Boards found", boardReadDtoList);
      return exceptionHandler;
    }
  }

  @GetMapping(path="/one")
  public @ResponseBody ResponseEntity<?>  getOneBoard(@RequestParam Integer id) {
    Optional<Board> board = boardRepository.findById(id);
    if (board.isEmpty()) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("Board not found");
      return exceptionHandler;
    } else {
      ReadBoardDto readBoardDto = modelMapper.map(board, ReadBoardDto.class);
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("Board found", readBoardDto);
      return exceptionHandler;
    }
  }

  @DeleteMapping(path="/delete")
  public @ResponseBody ResponseEntity<?> deleteBoard (@RequestParam Integer id) {
    if (!boardRepository.existsById(id)) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("Board not found");
      return exceptionHandler;
    } else {
      boardRepository.deleteById(id);
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("Board deleted", null);
      return exceptionHandler;
    }
  }

  @PutMapping(path="/update")
  public @ResponseBody ResponseEntity<?> updateBoard (@RequestParam Integer id, @RequestBody UpdateBoardDto updateBoardDto) {
    if (!boardRepository.existsById(id)) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("Board not found");
      return exceptionHandler;
    } else {
      updateBoardDto.setId(id);

      Board board = modelMapper.map(updateBoardDto, Board.class);

      Board savedBoard = boardRepository.save(board);

      ReadBoardDto readBoardDto = modelMapper.map(savedBoard, ReadBoardDto.class);

      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("Board updated", readBoardDto);
      return exceptionHandler;
    }
  }
}