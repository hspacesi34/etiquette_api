package com.etiquette.BoardColumn;

import java.util.Collection;
import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.etiquette.BoardColumn.dtos.AddBoardColumnFormDto;
import com.etiquette.BoardColumn.dtos.ReadBoardColumnDto;
import com.etiquette.BoardColumn.dtos.UpdateBoardColumnDto;
import com.etiquette.GlobalExceptionHandler.GlobalExceptionHandler;
import com.etiquette.Mapping.CustomMap;

@Controller // This means that this class is a Controller
@RequestMapping(path="/boardcolumn") // This means URL's start with /demo (after Application path)
public class BoardColumnController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private BoardColumnRepository boardColumnRepository;
  ModelMapper modelMapper = new ModelMapper();

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody ResponseEntity<?> addNewBoardColumn (@RequestBody AddBoardColumnFormDto addBoardColumnFormDto) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
    if (boardColumnRepository.findByName(addBoardColumnFormDto.getName()).isPresent()) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityAlreadyExists("BoardColumn name already exists");
      return exceptionHandler;
    } else {
      try {
        BoardColumn boardColumn = modelMapper.map(addBoardColumnFormDto, BoardColumn.class);
        BoardColumn savedBoardColumn = boardColumnRepository.save(boardColumn);
        ReadBoardColumnDto savedBoardColumnReadDto = modelMapper.map(savedBoardColumn, ReadBoardColumnDto.class);
        ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("BoardColumn added", savedBoardColumnReadDto);
        return exceptionHandler;
      } catch (Exception e) {
        ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleRequestFailed(e.getMessage());
        return exceptionHandler;
      }
      
    }
  }

  @GetMapping(path="/all")
  public @ResponseBody ResponseEntity<?> getAllBoardColumns() {
    Iterable<BoardColumn> boardColumns = boardColumnRepository.findAll();
    if (((Collection<?>) boardColumns).isEmpty()) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("No BoardColumns found");
      return exceptionHandler;
    } else {
      List<ReadBoardColumnDto> boardColumnReadDtoList = CustomMap.mapIterable(boardColumns, ReadBoardColumnDto.class);
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequestIterable("BoardColumns found", boardColumnReadDtoList);
      return exceptionHandler;
    }
  }

  @GetMapping(path="/one")
  public @ResponseBody ResponseEntity<?>  getOneBoardColumn(@RequestParam Integer id) {
    Optional<BoardColumn> boardColumn = boardColumnRepository.findById(id);
    if (boardColumn.isEmpty()) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("BoardColumn not found");
      return exceptionHandler;
    } else {
      ReadBoardColumnDto readBoardColumnDto = modelMapper.map(boardColumn, ReadBoardColumnDto.class);
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("BoardColumn found", readBoardColumnDto);
      return exceptionHandler;
    }
  }

  @DeleteMapping(path="/delete")
  public @ResponseBody ResponseEntity<?> deleteBoardColumn (@RequestParam Integer id) {
    if (!boardColumnRepository.existsById(id)) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("BoardColumn not found");
      return exceptionHandler;
    } else {
      boardColumnRepository.deleteById(id);
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("BoardColumn deleted", null);
      return exceptionHandler;
    }
  }

  @PutMapping(path="/update")
  public @ResponseBody ResponseEntity<?> updateBoardColumn (@RequestParam Integer id, @RequestBody UpdateBoardColumnDto updateBoardColumnDto) {
    if (!boardColumnRepository.existsById(id)) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("BoardColumn not found");
      return exceptionHandler;
    } else {
      updateBoardColumnDto.setId(id);

      BoardColumn boardColumn = modelMapper.map(updateBoardColumnDto, BoardColumn.class);

      BoardColumn savedBoardColumn = boardColumnRepository.save(boardColumn);

      ReadBoardColumnDto readBoardColumnDto = modelMapper.map(savedBoardColumn, ReadBoardColumnDto.class);

      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("BoardColumn updated", readBoardColumnDto);
      return exceptionHandler;
    }
  }
}