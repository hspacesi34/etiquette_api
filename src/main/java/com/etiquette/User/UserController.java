package com.etiquette.User;

import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.etiquette.GlobalExceptionHandler.GlobalExceptionHandler;
import com.etiquette.Role.dtos.AddRoleFormDto;
import com.etiquette.User.dtos.AddUserFormDto;
import com.etiquette.User.dtos.ReadUserDto;

@Controller // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class UserController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;
  ModelMapper modelMapper = new ModelMapper();

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody ResponseEntity<?> addNewUser (@RequestBody AddUserFormDto addUserForm) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    User user = modelMapper.map(addUserForm, User.class);

    if (userRepository.findByEmail(addUserForm.getEmail()).isPresent()) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityAlreadyExists("Email already exists");
      return exceptionHandler;
    } else {
      userRepository.save(user);
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("User added", null);
      return exceptionHandler;
    }
    
  }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }

  @GetMapping(path="/one")
  public @ResponseBody ResponseEntity<?>  getOneUser(@RequestParam Integer id) {
    Optional<User> user = userRepository.findById(id);
    if (user.isEmpty()) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("User not found");
      return exceptionHandler;
    } else {
      ReadUserDto readUserDto = modelMapper.map(user, ReadUserDto.class);
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("User found", readUserDto);
      return exceptionHandler;
    }
  }

  @DeleteMapping(path="/delete")
  public @ResponseBody ResponseEntity<?> deleteUser (@RequestParam Integer id) {
    if (!userRepository.existsById(id)) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("User not found");
      return exceptionHandler;
    } else {
      userRepository.deleteById(id);
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("User deleted", null);
      return exceptionHandler;
    }
  }

  @PutMapping(path="/update")
  public @ResponseBody ResponseEntity<?> updateUser (@RequestParam Integer id, @RequestBody AddUserFormDto addUserForm) {
    if (!userRepository.existsById(id)) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("User not found");
      return exceptionHandler;
    } else {
      addUserForm.setId(id);

      AddRoleFormDto addRoleFormDto = new AddRoleFormDto();
      addRoleFormDto.setId(100);
      addUserForm.setRole(addRoleFormDto);

      User user = modelMapper.map(addUserForm, User.class);

      userRepository.save(user);

      ReadUserDto readUserDto = modelMapper.map(user, ReadUserDto.class);

      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("User updated", readUserDto);
      return exceptionHandler;
    }
  }
}