package com.etiquette.User;

import java.util.Collection;
import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.etiquette.GlobalExceptionHandler.GlobalExceptionHandler;
import com.etiquette.Mapping.CustomMap;
import com.etiquette.Role.dtos.AddRoleDto;
import com.etiquette.User.dtos.AddUserFormDto;
import com.etiquette.User.dtos.LoginUserDto;
import com.etiquette.User.dtos.ReadUserDto;
import com.etiquette.User.dtos.UpdateUserDto;
import com.etiquette.services.JwtService;

import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletResponse;

@Controller // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class UserController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;
  ModelMapper modelMapper = new ModelMapper();

  private JwtService jwtService;

  private static final Logger logger = LoggerFactory.getLogger(UserController.class);


  public UserController(JwtService jwtService) {
        this.jwtService = jwtService;
  }

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody ResponseEntity<?> addNewUser (@RequestBody AddUserFormDto addUserForm) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
    if (userRepository.findByEmail(addUserForm.getEmail()).isPresent()) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityAlreadyExists("Email already exists");
      return exceptionHandler;
    } else {
      AddRoleDto addRoleDto = new AddRoleDto();
      addRoleDto.setId(100);
      addUserForm.setRole(addRoleDto);
      User user = modelMapper.map(addUserForm, User.class);
      User savedUser = userRepository.save(user);
      ReadUserDto savedUserReadDto = modelMapper.map(savedUser, ReadUserDto.class);
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("User added", savedUserReadDto);
      return exceptionHandler;
    }
    
  }

  @GetMapping(path="/all")
  public @ResponseBody ResponseEntity<?> getAllUsers() {
    Iterable<User> users = userRepository.findAll();
    if (((Collection<?>) users).isEmpty()) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("No users found");
      return exceptionHandler;
    } else {
      List<ReadUserDto> userReadDtoList = CustomMap.mapIterable(users, ReadUserDto.class);
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequestIterable("Users found", userReadDtoList);
      return exceptionHandler;
    }
  }

  @GetMapping(path="/one")
  public @ResponseBody ResponseEntity<?>  getOneUser(@RequestParam Integer id) {
    Optional<User> user = userRepository.findById(id);
    if (user.isEmpty()) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("User not found");
      return exceptionHandler;
    } else {
      ReadUserDto readUserDto = modelMapper.map(user, ReadUserDto.class);
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("User found", readUserDto);
      return exceptionHandler;
    }
  }

  @DeleteMapping(path="/delete")
  public @ResponseBody ResponseEntity<?> deleteUser (@RequestParam Integer id) {
    if (!userRepository.existsById(id)) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("User not found");
      return exceptionHandler;
    } else {
      userRepository.deleteById(id);
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("User deleted", null);
      return exceptionHandler;
    }
  }

  @PutMapping(path="/update")
  public @ResponseBody ResponseEntity<?> updateUser (@RequestParam Integer id, @RequestBody UpdateUserDto updateUserDto) {
    if (!userRepository.existsById(id)) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("User not found");
      return exceptionHandler;
    } else {
      updateUserDto.setId(id);

      AddRoleDto addRoleDto = new AddRoleDto();
      addRoleDto.setId(100);
      updateUserDto.setRole(addRoleDto);

      User user = modelMapper.map(updateUserDto, User.class);

      User savedUser = userRepository.save(user);

      ReadUserDto readUserDto = modelMapper.map(savedUser, ReadUserDto.class);

      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("User updated", readUserDto);
      return exceptionHandler;
    }
  }

  @PostMapping(path = "/login")
  public @ResponseBody ResponseEntity<?> loginUser (@RequestBody LoginUserDto loginUserDto, HttpServletResponse response) {
    User userEntity = modelMapper.map(loginUserDto, User.class);
    Optional<User> userFound = userRepository.findByEmail(userEntity.getEmail());
    if (userFound.isEmpty()) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("User not found");
      return exceptionHandler;
    } else {
      if (!userFound.get().getPassword().equals(loginUserDto.getPassword())) {
        ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("Invalid password");
        return exceptionHandler;
      } else {
        String userIdString = Integer.toString(userFound.get().getId());
        String token = jwtService.generateToken(userIdString, userFound.get().getRole().getName());

        // Create cookie
        Cookie cookie = new Cookie("jwt-token", token);
        cookie.setHttpOnly(true);           // Prevent JS access for security
        cookie.setSecure(false);             // Send only over HTTPS (set false for local dev)
        cookie.setPath("/");                // Cookie valid for entire site
        cookie.setMaxAge(60 * 60);         // Expire in 1 hour (seconds)
        cookie.setDomain("localhost");
      

        // Add cookie to response
        response.addCookie(cookie);

        ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("Login success", null);
        return exceptionHandler;
      }
    }
  }

  @PostMapping(path="/signin") // Map ONLY POST Requests
  public @ResponseBody ResponseEntity<?> signinUser (@RequestBody AddUserFormDto addUserForm) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
    if (userRepository.findByEmail(addUserForm.getEmail()).isPresent()) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityAlreadyExists("Email already exists");
      return exceptionHandler;
    } else {
      AddRoleDto addRoleDto = new AddRoleDto();
      addRoleDto.setId(100);
      addUserForm.setRole(addRoleDto);
      User user = modelMapper.map(addUserForm, User.class);
      User savedUser = userRepository.save(user);
      ReadUserDto savedUserReadDto = modelMapper.map(savedUser, ReadUserDto.class);
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("User added", savedUserReadDto);
      return exceptionHandler;
    }
    
  }

  @PostMapping(path = "/istokenvalid")
  public @ResponseBody ResponseEntity<?> isTokenValid (@CookieValue(name = "jwt-token", required = false) String token) {
        if (token != null) {
          if (!jwtService.isTokenValid(token)) {
            ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("Invalid token");
            return exceptionHandler;
          } else {
            ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("Valid token", null);
            return exceptionHandler;
          }
        }
        ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("Cookie not found");
        return exceptionHandler; 
  }
}