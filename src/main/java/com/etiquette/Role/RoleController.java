package com.etiquette.Role;

import java.util.Collection;
import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.etiquette.GlobalExceptionHandler.GlobalExceptionHandler;
import com.etiquette.Mapping.CustomMap;
import com.etiquette.Role.dtos.AddRoleFormDto;
import com.etiquette.Role.dtos.ReadRoleDto;
import com.etiquette.Role.dtos.UpdateRoleDto;

@Controller // This means that this class is a Controller
@RequestMapping(path="/role") // This means URL's start with /demo (after Application path)
public class RoleController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private RoleRepository roleRepository;
  ModelMapper modelMapper = new ModelMapper();

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody ResponseEntity<?> addNewRole (@RequestBody AddRoleFormDto addRoleFormDto) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
    if (roleRepository.findByName(addRoleFormDto.getName()).isPresent()) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityAlreadyExists("Role already exists");
      return exceptionHandler;
    } else {
      Role role = modelMapper.map(addRoleFormDto, Role.class);
      Role savedRole = roleRepository.save(role);
      ReadRoleDto savedRoleReadDto = modelMapper.map(savedRole, ReadRoleDto.class);
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("Role added", savedRoleReadDto);
      return exceptionHandler;
    }
    
  }

  @GetMapping(path="/all")
  public @ResponseBody ResponseEntity<?> getAllRoles() {
    Iterable<Role> roles = roleRepository.findAll();
    if (((Collection<?>) roles).isEmpty()) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("No roles found");
      return exceptionHandler;
    } else {
      List<ReadRoleDto> roleReadDtoList = CustomMap.mapIterable(roles, ReadRoleDto.class);
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequestIterable("Roles found", roleReadDtoList);
      return exceptionHandler;
    }
  }

  @GetMapping(path="/one")
  public @ResponseBody ResponseEntity<?>  getOneRole(@RequestParam Integer id) {
    Optional<Role> role = roleRepository.findById(id);
    if (role.isEmpty()) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("Role not found");
      return exceptionHandler;
    } else {
      ReadRoleDto readRoleDto = modelMapper.map(role, ReadRoleDto.class);
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("Role found", readRoleDto);
      return exceptionHandler;
    }
  }

  @DeleteMapping(path="/delete")
  public @ResponseBody ResponseEntity<?> deleteRole (@RequestParam Integer id) {
    if (!roleRepository.existsById(id)) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("Role not found");
      return exceptionHandler;
    } else {
      roleRepository.deleteById(id);
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("Role deleted", null);
      return exceptionHandler;
    }
  }

  @PutMapping(path="/update")
  public @ResponseBody ResponseEntity<?> updateRole (@RequestParam Integer id, @RequestBody UpdateRoleDto updateRoleDto) {
    if (!roleRepository.existsById(id)) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("Role not found");
      return exceptionHandler;
    } else {
      updateRoleDto.setId(id);

      Role role = modelMapper.map(updateRoleDto, Role.class);

      Role savedRole = roleRepository.save(role);

      ReadRoleDto readRoleDto = modelMapper.map(savedRole, ReadRoleDto.class);

      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("Role updated", readRoleDto);
      return exceptionHandler;
    }
  }
}