package com.etiquette.Invitation;

import java.util.Collection;
import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.etiquette.GlobalExceptionHandler.GlobalExceptionHandler;
import com.etiquette.Invitation.dtos.AddInvitationFormDto;
import com.etiquette.Invitation.dtos.ReadInvitationDto;
import com.etiquette.Invitation.dtos.UpdateInvitationDto;
import com.etiquette.Mapping.CustomMap;
import com.etiquette.Participation.Participation;
import com.etiquette.Participation.ParticipationRepository;
import com.etiquette.Participation.dtos.AddParticipationFormDto;
import com.etiquette.User.User;

@Controller // This means that this class is a Controller
@RequestMapping(path="/invitation") // This means URL's start with /demo (after Application path)
public class InvitationController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private InvitationRepository invitationRepository;
  @Autowired
  private ParticipationRepository participationRepository;
  ModelMapper modelMapper = new ModelMapper();

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody ResponseEntity<?> addNewInvitation (@RequestBody AddInvitationFormDto addInvitationFormDto) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
    User userEntity = modelMapper.map(addInvitationFormDto.getUserReciever(), User.class);
    if (invitationRepository.findByUserReciever(userEntity).isPresent()) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityAlreadyExists("User already invited");
      return exceptionHandler;
    } else {
      if (participationRepository.findByUser(userEntity).isPresent()) {
        ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityAlreadyExists("User already participates");
        return exceptionHandler;
      } else {
        Invitation invitation = modelMapper.map(addInvitationFormDto, Invitation.class);
        Invitation savedInvitation = invitationRepository.save(invitation);
        ReadInvitationDto savedInvitationReadDto = modelMapper.map(savedInvitation, ReadInvitationDto.class);
        ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("Invitation added", savedInvitationReadDto);
        return exceptionHandler;
      }
    }
  }

  @PutMapping(path="/accept")
  public @ResponseBody ResponseEntity<?> acceptInvitation (@RequestParam Integer id, @RequestBody UpdateInvitationDto updateInvitationFormDto) {
    if (invitationRepository.findByStatus("accepted").isPresent()) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityAlreadyExists("Invitation already accepted");
      return exceptionHandler;
    } else {
      AddParticipationFormDto participationFormDto = new AddParticipationFormDto();
      participationFormDto.setBoard(updateInvitationFormDto.getBoard());
      participationFormDto.setUser(updateInvitationFormDto.getUserReciever());
      Participation participationEntity = modelMapper.map(participationFormDto, Participation.class);
      participationRepository.save(participationEntity);
  
      updateInvitationFormDto.setId(id);
      updateInvitationFormDto.setStatus("accepted");
      Invitation invitation = modelMapper.map(updateInvitationFormDto, Invitation.class);
      Invitation savedInvitation = invitationRepository.save(invitation);
  
      ReadInvitationDto savedInvitationReadDto = modelMapper.map(savedInvitation, ReadInvitationDto.class);
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("Invitation accepted", savedInvitationReadDto);
      return exceptionHandler;
    }
  }

  @GetMapping(path="/all")
  public @ResponseBody ResponseEntity<?> getAllInvitations() {
    Iterable<Invitation> invitations = invitationRepository.findAll();
    if (((Collection<?>) invitations).isEmpty()) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("No Invitations found");
      return exceptionHandler;
    } else {
      List<ReadInvitationDto> invitationReadDtoList = CustomMap.mapIterable(invitations, ReadInvitationDto.class);
      Integer nbOfInvitationsInt = invitationReadDtoList.size();
      String nbOfInvitationsString = Integer.toString(nbOfInvitationsInt);
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequestIterable(nbOfInvitationsString+" Invitations found", invitationReadDtoList);
      return exceptionHandler;
    }
  }

  @GetMapping(path="/one")
  public @ResponseBody ResponseEntity<?>  getOneInvitation(@RequestParam Integer id) {
    Optional<Invitation> invitation = invitationRepository.findById(id);
    if (invitation.isEmpty()) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("Invitation not found");
      return exceptionHandler;
    } else {
      ReadInvitationDto readInvitationDto = modelMapper.map(invitation, ReadInvitationDto.class);
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("Invitation found", readInvitationDto);
      return exceptionHandler;
    }
  }

  @DeleteMapping(path="/delete")
  public @ResponseBody ResponseEntity<?> deleteInvitation (@RequestParam Integer id) {
    if (!invitationRepository.existsById(id)) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("Invitation not found");
      return exceptionHandler;
    } else {
      invitationRepository.deleteById(id);
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("Invitation deleted", null);
      return exceptionHandler;
    }
  }

  @PutMapping(path="/update")
  public @ResponseBody ResponseEntity<?> updateInvitation (@RequestParam Integer id, @RequestBody UpdateInvitationDto updateInvitationDto) {
    if (!invitationRepository.existsById(id)) {
      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleEntityNotFound("Invitation not found");
      return exceptionHandler;
    } else {
      updateInvitationDto.setId(id);

      Invitation invitation = modelMapper.map(updateInvitationDto, Invitation.class);

      Invitation savedInvitation = invitationRepository.save(invitation);

      ReadInvitationDto readInvitationDto = modelMapper.map(savedInvitation, ReadInvitationDto.class);

      ResponseEntity<?> exceptionHandler = new GlobalExceptionHandler().handleSuccesfullRequest("Invitation updated", readInvitationDto);
      return exceptionHandler;
    }
  }
}